$ curl -k https://writer:secret@localhost:8443/oauth/token -d grant_type=password -d username=magnus -d password=password -s | jq .

>>>

$ curl -k https://reader:secret@localhost:8443/oauth/token -d grant_type=password -d username=magnus -d password=password -s | jq .

>>>

https://localhost:8443/oauth/authorize?response_type=token&client_id=reader&redirect_uri=http://my.redirect.uri&scope=product:read&state=48532

>>>

https://localhost:8443/oauth/authorize?response_type=token&client_id=writer&redirect_uri=http://my.redirect.uri&scope=product:read+product:write&state=95372

>>>

https://localhost:8443/oauth/authorize?response_type=code&client_id=reader&redirect_uri=http://my.redirect.uri&scope=product:read&state=35725

curl -k https://reader:secret@localhost:8443/oauth/token -d grant_type=authorization_code -d client_id=reader -dredirect_uri=http://my.redirect.uri -d code=xxxxx

>>>

https://localhost:8443/oauth/authorize?response_type=code&client_id=writer&redirect_uri=http://my.redirect.uri&scope=product:read+product:write&state=72489

curl -k https://writer:secret@localhost:8443/oauth/token -d grant_type=authorization_code -d client_id=writer -dredirect_uri=http://my.redirect.uri -d code=xxxxx

>>>

ACCESS_TOKEN=an-invalid-token

curl https://localhost:8443/product-composite/2 -k -H "Authorization: Bearer $ACCESS_TOKEN" -i

HTTP/1.1 401 Unauthorized
WWW-Authenticate: Bearer error="invalid_token", error_description="An error occurred while attempting to decode the Jwt: Invalid JWT serialization: Missing dot delimiter(s)", error_uri="https://tools.ietf.org/html/rfc6750#section-3.1"
Cache-Control: no-cache, no-store, max-age=0, must-revalidate
Pragma: no-cache
Expires: 0
X-Content-Type-Options: nosniff
Strict-Transport-Security: max-age=31536000 ; includeSubDomains
X-Frame-Options: DENY
X-XSS-Protection: 1 ; mode=block
Referrer-Policy: no-referrer
content-length: 0

>>>

ACCESS_TOKEN=xxxxx

curl https://localhost:8443/product-composite/2 -k -H "Authorization: Bearer $ACCESS_TOKEN" -i

curl https://localhost:8443/product-composite/2 -k -H "Authorization: Bearer $ACCESS_TOKEN" -X DELETE -i

>>>

ACCESS_TOKEN=xxxxx

curl https://localhost:8443/product-composite/2 -k -H "Authorization: Bearer $ACCESS_TOKEN" -i

curl https://localhost:8443/product-composite/2 -k -H "Authorization: Bearer $ACCESS_TOKEN" -X DELETE -i

>>>>>>>> Auth0

curl --request POST --url "https://${TENANT_DOMAIN_NAME}/oauth/token" --header "content-type: application/json" --data "{\"grant_type\":\"password\", \"username\":\"${USER_EMAIL}\", \"password\":\"${USER_PASSWORD}\", \"audience\":\"https://localhost:8443/product-composite\", \"scope\":\"openid email product:read\", \"client_id\":\"${CLIENT_ID}\", \"client_secret\":\"${CLIENT_SECRET}\"}" -s | jq

curl --request POST --url "https://${TENANT_DOMAIN_NAME}/oauth/token" --header "content-type: application/json" --data "{\"grant_type\":\"password\", \"username\":\"${USER_EMAIL}\", \"password\":\"${USER_PASSWORD}\", \"audience\":\"https://localhost:8443/product-composite\", \"scope\":\"openid email product:read product:write\", \"client_id\":\"${CLIENT_ID}\", \"client_secret\":\"${CLIENT_SECRET}\"}" -s | jq

>>>

https://${TENANT_DOMAIN_NAME}/authorize?response_type=token&scope=openid email product:read product:write&client_id=${CLIENT_ID}&state=98421&nonce=jxdlsjfi0fa&redirect_uri=http://my.redirect.uri&audience=https://localhost:8443/product-composite

https://${TENANT_DOMAIN_NAME}/authorize?response_type=token&scope=openid email product:read&client_id=${CLIENT_ID}&state=98421&nonce=jxdlsjfi0fa&redirect_uri=http://my.redirect.uri&audience=https://localhost:8443/product-composite

>>>

https://${TENANT_DOMAIN_NAME}/authorize?response_type=code&scope=openid email product:read product:write&client_id=${CLIENT_ID}&state=98421&redirect_uri=http://my.redirect.uri&audience=https://localhost:8443/product-composite

curl --request POST --url "https://${TENANT_DOMAIN_NAME}/oauth/token" --header "content-type: application/json" --data "{\"grant_type\":\"authorization_code\", \"client_id\":\"${CLIENT_ID}\", \"client_secret\":\"${CLIENT_SECRET}\", \"code\":\"${CODE}\", \"redirect_uri\":\"http://my.redirect.uri\"}" -s | jq

>>>

curl -H "Authorization: Bearer $ACCESS_TOKEN" https://${TENANT_DOMAIN_NAME}/userinfo -s | jq

>>> p.382

unset ACCESS_TOKEN
ACCESS_TOKEN=$(curl -k https://writer:secret@localhost:8443/oauth/token -d grant_type=password -d username=magnus -d password=password -s | jq -r .access_token)
echo $ACCESS_TOKEN

curl -H "Authorization: Bearer $ACCESS_TOKEN" -k https://localhost:8443/product-composite/2 -w "%{http_code}\n" -o /dev/null -s

docker run --rm -it --network=my-network alpine wget product-composite:8080/actuator/health -qO - | jq -r .components.circuitBreakers.details.product.details.state

>>> 

curl -H "Authorization: Bearer $ACCESS_TOKEN" -k https://localhost:8443/product-composite/2?delay=3 -s | jq .

curl -H "Authorization: Bearer $ACCESS_TOKEN" -k https://localhost:8443/product-composite/2?delay=3 -s | jq .

curl -H "Authorization: Bearer $ACCESS_TOKEN" -k https://localhost:8443/product-composite/2?delay=3 -s | jq .

curl -H "Authorization: Bearer $ACCESS_TOKEN" -k https://localhost:8443/product-composite/2?delay=3 -s | jq .

docker run --rm -it --network=my-network alpine wget product-composite:8080/actuator/health -qO - | jq -r .components.circuitBreakers.details.product.details.state

>>>

curl -H "Authorization: Bearer $ACCESS_TOKEN" -k https://localhost:8443/product-composite/2 -w "%{http_code}\n" -o /dev/null -s

>>>
docker run --rm -it --network=my-network alpine wget product-composite:8080/actuator/circuitbreakerevents/product/STATE_TRANSITION -qO - | jq -r .circuitBreakerEvents[].stateTransition

>>>
time curl -H "Authorization: Bearer $ACCESS_TOKEN" -k https://localhost:8443/product-composite/2?faultPercent=25 -w "%{http_code}\n" -o /dev/null -s

time curl -H "Authorization: Bearer $ACCESS_TOKEN" -k https://localhost:8443/product-composite/2?faultPercent=75 -w "%{http_code}\n" -o /dev/null -s

time curl -H "Authorization: Bearer $ACCESS_TOKEN" -k https://localhost:8443/product-composite/2?faultPercent=100 -w "%{http_code}\n" -o /dev/null -s

docker run --rm -it --network=my-network alpine wget product-composite:8080/actuator/retryevents -qO - | jq .

>>>

unset ACCESS_TOKEN
ACCESS_TOKEN=$(curl -k https://writer:secret@localhost:8443/oauth/token -d grant_type=password -d username=magnus -d password=password -s | jq -r .access_token)
echo $ACCESS_TOKEN

curl -H "Authorization: Bearer $ACCESS_TOKEN" -k https://localhost:8443/product-composite/2 -w "%{http_code}\n" -o /dev/null -s

curl -H "Authorization: Bearer $ACCESS_TOKEN" -k https://localhost:8443/product-composite/12345 -w "%{http_code}\n" -o /dev/null -s

curl -X DELETE -H "Authorization: Bearer $ACCESS_TOKEN" -k https://localhost:8443/product-composite/12345 -w "%{http_code}\n" -o /dev/null -s

>>>

unset ACCESS_TOKEN
ACCESS_TOKEN=$(curl -k https://writer:secret@minikube.me/oauth/token -d grant_type=password -d username=magnus -d password=password -s | jq -r .access_token)
echo $ACCESS_TOKEN

curl -H "Authorization: Bearer $ACCESS_TOKEN" -k https://minikube.me/product-composite/2 -s

>>>

unset ACCESS_TOKEN
ACCESS_TOKEN=$(curl -k https://writer:secret@istio.uohiro.me.uk/oauth/token -d grant_type=password -d username=magnus -d password=password -s | jq -r .access_token)
echo $ACCESS_TOKEN

curl -H "Authorization: Bearer $ACCESS_TOKEN" -k https://istio.uohiro.me.uk/product-composite/2 -s

>>>

unset ACCESS_TOKEN
ACCESS_TOKEN=$(curl -k https://writer:secret@istio.uohiro.me.uk/oauth/token -d grant_type=password -d username=magnus -d password=password -s | jq -r .access_token)
echo $ACCESS_TOKEN

siege https://istio.uohiro.me.uk/product-composite/2 -H "Authorization: Bearer $ACCESS_TOKEN" -c1 -d1 -v

>>>

kubectl apply -f kubernetes/services/base/istio/jwt-authentication-policy.yml
kubectl delete -f kubernetes/services/base/istio/jwt-authentication-policy.yml

curl https://istio.uohiro.me.uk/product-composite/2 -kw " HTTP Code: %{http_code}\n"

curl -H "Authorization: Bearer hogehoge" https://istio.uohiro.me.uk/product-composite/2 -kw " HTTP Code: %{http_code}\n"

curl -H "Authorization: Bearer $ACCESS_TOKEN" https://istio.uohiro.me.uk/product-composite/2 -kw " HTTP Code: %{http_code}\n"

curl https://istio.uohiro.me.uk/actuator/health

unset ACCESS_TOKEN
ACCESS_TOKEN=$(curl -k https://writer:secret@istio.uohiro.me.uk/oauth/token -d grant_type=password -d username=magnus -d password=password -s | jq -r .access_token)
echo $ACCESS_TOKEN

curl -H "Authorization: Bearer $ACCESS_TOKEN" -k https://istio.uohiro.me.uk/product-composite/2 -s

>>>
HOST=istio.uohiro.me.uk PORT=443 HEALTH_URL=https://istio.uohiro.me.uk ./test-em-all.bash

>>>
HOST=istio.uohiro.me.uk PORT=443 SKIP_CB_TESTS=true ./test-em-all.bash

>>>

kubectl patch virtualservice review-vs --type=json -p='[
  {"op": "add", "path": "/spec/http/1/route/0/weight", "value": 80},
  {"op": "add", "path": "/spec/http/1/route/1/weight", "value": 20}
]'

>>>

unset ACCESS_TOKEN
ACCESS_TOKEN=$(curl -k https://writer:secret@istio.uohiro.me.uk/oauth/token -d grant_type=password -d username=magnus -d password=password -s | jq -r .access_token)
echo $ACCESS_TOKEN

curl -H "Authorization: Bearer $ACCESS_TOKEN" -k https://istio.uohiro.me.uk/product-composite/2 -s | jq .productId

>>>

unset ACCESS_TOKEN
ACCESS_TOKEN=$(curl -k https://writer:secret@istio.uohiro.me.uk/oauth/token -d grant_type=password -d username=magnus -d password=password -s | jq -r .access_token)
echo $ACCESS_TOKEN

curl -X POST -H "Authorization: Bearer $ACCESS_TOKEN" -H "Content-Type: application/json" -k https://istio.uohiro.me.uk/product-composite --data '{"productId":2345, "name":"product name 2345", "weight":2345}'
curl -H "Authorization: Bearer $ACCESS_TOKEN" -k https://istio.uohiro.me.uk/product-composite/2345

curl -H "Authorization: Bearer $ACCESS_TOKEN" -k https://istio.uohiro.me.uk/product-composite/666?faultPercent=100

>>>

kubectl create deployment mail-server --image djfarrelly/maildev:1.1.0
kubectl expose deployment mail-server --port=80,25 --type=ClusterIP
kubectl wait --timeout=60s --for=condition=ready pod -l app=mail-server

kubectl -n istio-system set env deployment/grafana GF_SMTP_ENABLED=true GF_SMTP_SKIP_VERIFY=true GF_SMTP_HOST=mail-server.hands-on.svc.cluster.local:25 GF_SMTP_FROM_ADDRESS=grafana@uohiro.me.uk
kubectl -n istio-system wait --timeout=60s --for=condition=ready pod -l app=grafana

>>>

resilience4j_circuitbreaker_calls_total{application="product-composite",kind="not_permitted",name="product",} 2.0
resilience4j_circuitbreaker_failure_rate{application="product-composite",name="product",} 0.0
resilience4j_circuitbreaker_buffered_calls{application="product-composite",kind="failed",name="product",} 0.0
resilience4j_circuitbreaker_buffered_calls{application="product-composite",kind="successful",name="product",} 5.0
resilience4j_circuitbreaker_slow_call_rate{application="product-composite",name="product",} 0.0

resilience4j_retry_calls_total{application="product-composite",kind="successful_with_retry",name="product",} 0.0
resilience4j_retry_calls_total{application="product-composite",kind="failed_with_retry",name="product",} 0.0
resilience4j_retry_calls_total{application="product-composite",kind="successful_without_retry",name="product",} 1339.0
resilience4j_retry_calls_total{application="product-composite",kind="failed_without_retry",name="product",} 6.0

resilience4j_circuitbreaker_calls_seconds_sum{application="product-composite",kind="successful",name="product",} 19.65526426
resilience4j_circuitbreaker_calls_seconds_count{application="product-composite",kind="failed",name="product",} 3.0
resilience4j_circuitbreaker_calls_seconds_sum{application="product-composite",kind="failed",name="product",} 6.010033732
resilience4j_circuitbreaker_calls_seconds_count{application="product-composite",kind="ignored",name="product",} 1.0
resilience4j_circuitbreaker_calls_seconds_sum{application="product-composite",kind="ignored",name="product",} 0.212516499

resilience4j_circuitbreaker_calls_seconds_count{application="product-composite",kind="successful",name="product",} 1339.0
resilience4j_circuitbreaker_calls_seconds_max{application="product-composite",kind="successful",name="product",} 0.026671836
resilience4j_circuitbreaker_calls_seconds_max{application="product-composite",kind="failed",name="product",} 0.0
resilience4j_circuitbreaker_calls_seconds_max{application="product-composite",kind="ignored",name="product",} 0.0

resilience4j_circuitbreaker_state{application="product-composite",name="product",state="metrics_only",} 0.0
resilience4j_circuitbreaker_state{application="product-composite",name="product",state="open",} 0.0
resilience4j_circuitbreaker_state{application="product-composite",name="product",state="forced_open",} 0.0
resilience4j_circuitbreaker_state{application="product-composite",name="product",state="half_open",} 0.0
resilience4j_circuitbreaker_state{application="product-composite",name="product",state="disabled",} 0.0
resilience4j_circuitbreaker_state{application="product-composite",name="product",state="closed",} 1.0

resilience4j_circuitbreaker_slow_calls{application="product-composite",kind="successful",name="product",} 0.0
resilience4j_circuitbreaker_slow_calls{application="product-composite",kind="failed",name="product",} 0.0

resilience4j_circuitbreaker_state{application="product-composite",name="product",state="metrics_only",} 0.0
resilience4j_circuitbreaker_state{application="product-composite",name="product",state="open",} 0.0
resilience4j_circuitbreaker_state{application="product-composite",name="product",state="forced_open",} 0.0
resilience4j_circuitbreaker_state{application="product-composite",name="product",state="half_open",} 0.0
resilience4j_circuitbreaker_state{application="product-composite",name="product",state="disabled",} 0.0
resilience4j_circuitbreaker_state{application="product-composite",name="product",state="closed",} 1.0

>>>

unset ACCESS_TOKEN
ACCESS_TOKEN=$(curl -k https://writer:secret@istio.uohiro.me.uk/oauth/token -d grant_type=password -d username=magnus -d password=password -s | jq -r .access_token)
echo $ACCESS_TOKEN


for ((n=0; n<3; n++)); do curl -o /dev/null -skL -w "%{http_code}\n" -H "Authorization: Bearer $ACCESS_TOKEN" https://istio.uohiro.me.uk/product-composite/2?delay=3 -s; done 

for ((n=0; n<3; n++)); do curl -o /dev/null -skL -w "%{http_code}\n" -H "Authorization: Bearer $ACCESS_TOKEN" https://istio.uohiro.me.uk/product-composite/2?delay=0 -s; done 

curl -o /dev/null -skL -w "%{http_code}\n" -H "Authorization: Bearer $ACCESS_TOKEN" https://istio.uohiro.me.uk/product-composite/2?delay=0 -s

>>>

while true; do curl -o /dev/null -skL -w "%{http_code}\n" -H "Authorization: Bearer $ACCESS_TOKEN" https://istio.uohiro.me.uk/product-composite/2?faultPercent=10; sleep 3; done 

